import psycopg2
from psycopg2 import Error


def create_db(conn):
    try:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS clients (
                    client_id SERIAL PRIMARY KEY,
                    first_name VARCHAR(50) NOT NULL,
                    last_name VARCHAR(50) NOT NULL,
                    email VARCHAR(100) UNIQUE NOT NULL
                );
            """)

            cur.execute("""
                CREATE TABLE IF NOT EXISTS phones (
                    phone_id SERIAL PRIMARY KEY,
                    client_id INTEGER REFERENCES clients(client_id) ON DELETE CASCADE,
                    phone VARCHAR(20) UNIQUE
                );
            """)
            conn.commit()
            print("Таблицы успешно созданы")
    except Error as e:
        print(f"Ошибка при создании таблиц: {e}")


def add_client(conn, first_name, last_name, email, phones=None):
    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO clients (first_name, last_name, email)
                VALUES (%s, %s, %s)
                RETURNING client_id;
            """, (first_name, last_name, email))

            client_id = cur.fetchone()[0]

            if phones:
                for phone in phones:
                    add_phone(conn, client_id, phone)

            conn.commit()
            print(f"Клиент {first_name} {last_name} успешно добавлен с ID {client_id}")
            return client_id
    except Error as e:
        conn.rollback()
        print(f"Ошибка при добавлении клиента: {e}")
        return None


def add_phone(conn, client_id, phone):
    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO phones (client_id, phone)
                VALUES (%s, %s);
            """, (client_id, phone))
            conn.commit()
            print(f"Телефон {phone} успешно добавлен для клиента с ID {client_id}")
    except Error as e:
        conn.rollback()
        print(f"Ошибка при добавлении телефона: {e}")


def change_client(conn, client_id, first_name=None, last_name=None, email=None, phones=None):
    try:
        with conn.cursor() as cur:
            updates = []
            params = []

            if first_name:
                updates.append("first_name = %s")
                params.append(first_name)
            if last_name:
                updates.append("last_name = %s")
                params.append(last_name)
            if email:
                updates.append("email = %s")
                params.append(email)

            if updates:
                query = "UPDATE clients SET " + ", ".join(updates) + " WHERE client_id = %s"
                params.append(client_id)
                cur.execute(query, tuple(params))

            if phones is not None:
                cur.execute("DELETE FROM phones WHERE client_id = %s", (client_id,))
                for phone in phones:
                    if phone:
                        add_phone(conn, client_id, phone)

            conn.commit()
            print(f"Данные клиента с ID {client_id} успешно обновлены")
    except Error as e:
        conn.rollback()
        print(f"Ошибка при обновлении данных клиента: {e}")


def delete_phone(conn, client_id, phone):
    try:
        with conn.cursor() as cur:
            cur.execute("""
                DELETE FROM phones
                WHERE client_id = %s AND phone = %s;
            """, (client_id, phone))
            conn.commit()
            print(f"Телефон {phone} успешно удален у клиента с ID {client_id}")
    except Error as e:
        conn.rollback()
        print(f"Ошибка при удалении телефона: {e}")


def delete_client(conn, client_id):
    try:
        with conn.cursor() as cur:
            cur.execute("""
                DELETE FROM clients
                WHERE client_id = %s;
            """, (client_id,))
            conn.commit()
            print(f"Клиент с ID {client_id} успешно удален")
    except Error as e:
        conn.rollback()
        print(f"Ошибка при удалении клиента: {e}")


def find_client(conn, first_name=None, last_name=None, email=None, phone=None):
    """Находит клиента по его данным"""
    try:
        with conn.cursor() as cur:
            query = """
                SELECT c.client_id, c.first_name, c.last_name, c.email, array_agg(p.phone) AS phones
                FROM clients c
                LEFT JOIN phones p ON c.client_id = p.client_id
                WHERE 1=1
            """
            params = []

            conditions = []
            if first_name:
                conditions.append("c.first_name = %s")
                params.append(first_name)
            if last_name:
                conditions.append("c.last_name = %s")
                params.append(last_name)
            if email:
                conditions.append("c.email = %s")
                params.append(email)
            if phone:
                conditions.append("p.phone = %s")
                params.append(phone)

            if conditions:
                query += " AND " + " AND ".join(conditions)

            query += " GROUP BY c.client_id"

            cur.execute(query, tuple(params))
            results = cur.fetchall()

            if results:
                print("Найденные клиенты:")
                for row in results:
                    client_id, f_name, l_name, email, phones = row
                    phones = [p for p in phones if p is not None]  # Убираем None из списка телефонов
                    print(
                        f"ID: {client_id}, Имя: {f_name} {l_name}, Email: {email}, Телефоны: {', '.join(phones) if phones else 'нет'}")
                return results
            else:
                print("Клиенты не найдены")
                return None
    except Error as e:
        print(f"Ошибка при поиске клиента: {e}")
        return None


def print_all_clients(conn):
    """Выводит всех клиентов (для демонстрации)"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT c.client_id, c.first_name, c.last_name, c.email, array_agg(p.phone) AS phones
                FROM clients c
                LEFT JOIN phones p ON c.client_id = p.client_id
                GROUP BY c.client_id
                ORDER BY c.client_id;
            """)
            results = cur.fetchall()

            if results:
                print("\nСписок всех клиентов:")
                for row in results:
                    client_id, f_name, l_name, email, phones = row
                    phones = [p for p in phones if p is not None]  # Убираем None из списка телефонов
                    print(
                        f"ID: {client_id}, Имя: {f_name} {l_name}, Email: {email}, Телефоны: {', '.join(phones) if phones else 'нет'}")
            else:
                print("В базе нет клиентов")
    except Error as e:
        print(f"Ошибка при получении списка клиентов: {e}")

if __name__ == "__main__":
    try:
        # Подключаемся к базе данных
        with psycopg2.connect(database="clients_db", user="postgres", password="postgres") as conn:
            print("Подключение к базе данных успешно")

            # Создаем таблицы
            create_db(conn)

            # Добавляем клиентов
            print("\nДобавляем клиентов:")
            client1 = add_client(conn, "Иван", "Иванов", "ivan@example.com", ["+79111234567", "+79117654321"])
            client2 = add_client(conn, "Петр", "Петров", "petr@example.com", ["+79219876543"])
            client3 = add_client(conn, "Сергей", "Сергеев", "sergey@example.com")

            # Выводим всех клиентов
            print_all_clients(conn)

            # Добавляем телефон существующему клиенту
            print("\nДобавляем телефон клиенту:")
            add_phone(conn, client3, "+79315556677")
            print_all_clients(conn)

            # Изменяем данные клиента
            print("\nИзменяем данные клиента:")
            change_client(conn, client1, first_name="Иван", last_name="Иванов", email="ivan.new@example.com",
                          phones=["+79111234567"])
            print_all_clients(conn)

            # Удаляем телефон клиента
            print("\nУдаляем телефон клиента:")
            delete_phone(conn, client1, "+79111234567")
            print_all_clients(conn)

            # Поиск клиентов
            print("\nПоиск клиентов:")
            print("По имени 'Иван':")
            find_client(conn, first_name="Иван")

            print("\nПо телефону '+79219876543':")
            find_client(conn, phone="+79219876543")

            print("\nПо email 'sergey@example.com':")
            find_client(conn, email="sergey@example.com")

            # Удаляем клиента
            print("\nУдаляем клиента:")
            delete_client(conn, client2)
            print_all_clients(conn)

    except Error as e:
        print(f"Ошибка при работе с PostgreSQL: {e}")
    finally:
        if conn:
            conn.close()
            print("Соединение с PostgreSQL закрыто")
